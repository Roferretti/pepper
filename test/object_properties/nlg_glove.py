from gensim.models import KeyedVectors
from collections import defaultdict, OrderedDict

import numpy as np

import os
import sqlite3


def map_instances_to_observations(c, root):
    """
    """
    string_dict = defaultdict(list)
    for type_dir in (type_dir for type_dir in os.listdir(root) if os.path.isdir(os.path.join(root, type_dir))):
        type_path = os.path.join(root, type_dir)
        for instance_dir in (instance_dir for instance_dir in os.listdir(type_path)
                             if os.path.isdir(os.path.join(type_path, instance_dir))):
            for observation in os.listdir(os.path.join(type_path, instance_dir)):
                c.execute('SELECT color FROM object_info WHERE id = (?)', (str(observation)[:-4],))
                color = c.fetchone()[0]
                description = color + ' ' + type_dir
                string_dict[instance_dir].append(description)

    return string_dict


def tag_tokens(color_names, keywords, separator=' '):

    all_tags = []

    for color_name in color_names:
        tag_dict = OrderedDict()
        tokens = color_name.split(separator)[:-1]
        for token in tokens:
            tag_dict[token] = check_color(token, keywords)

        all_tags.append(tag_dict)

    return all_tags


def check_color(token, keywords):
    color = 'NO'
    for keyword in keywords:
        if keyword in token:
            color = 'YES'

    return color


def get_keyword_vec(token_list, keywords, model, vocab):

    vecs = []
    for token in token_list:
        if token in vocab:
            vec = model[token]
            vecs.append(vec)
        else:
            for keyword in keywords:
                if keyword in token:
                    vec = model[keyword]
                    vecs.append(vec)

    mean_vec = np.mean(vecs, axis=0, dtype='float32')

    return mean_vec


def main():

    root = './results'

    color_keywords = ['aqua', 'black', 'blue', 'fuchsia', 'gray', 'green', 'lime', 'maroon', 'navy', 'olive',
                      'purple', 'red', 'silver', 'teal', 'white', 'yellow', 'grey', 'brown', 'orange', 'pink',
                      'turquoise', 'lavender', 'magenta']

    emb_file = 'glove_to_w2v.6B.100d.txt'
    emb_path = os.path.join('embeddings', emb_file)

    vec_model = KeyedVectors.load(emb_path, mmap='r')
    vocabulary = vec_model.wv.vocab.keys()

    conn = sqlite3.connect('instances.db')
    cur = conn.cursor()
    cur.execute('CREATE TABLE IF NOT EXISTS nlg_glove (instance TEXT, color TEXT);')

    instance_dict = map_instances_to_observations(cur, root)

    print('Instance descriptions generated by NLG baseline:')

    for instance, observations in instance_dict.items():
        tags = tag_tokens(observations, color_keywords)
        all_yes = [key for tagged in tags for key, value in tagged.items() if value == 'YES']
        if all_yes:
            mean_yes = get_keyword_vec(all_yes, color_keywords, vec_model, vocabulary)
            top_yes = vec_model.most_similar(positive=[mean_yes], topn=1)
        else:
            top_yes = ''

        all_no = [key for tagged in tags for key, value in tagged.items() if value == 'NO']
        if all_no:
            mean_no = np.mean([vec_model[no] for no in all_no if no in vocabulary], axis=0, dtype='float32')
            top_no = vec_model.most_similar(positive=[mean_no], topn=1)
        else:
            top_no = ''

        if top_yes and top_no:
            alt_color = top_no[0][0] + ' ' + top_yes[0][0]
        elif top_yes:
            alt_color = top_yes[0][0]
        else:
            alt_color = top_no[0][0]

        obj_type = ' '.join(instance.split('_')[:-1])
        alt_string = alt_color + ' ' + obj_type

        print('{}: {}'.format(instance, alt_string))
        cur.execute('INSERT INTO nlg_glove VALUES (?, ?);', (str(instance), str(alt_string)))

    conn.commit()
    print('\nResults saved to database.')
    conn.close()


if __name__ == '__main__':
    main()
